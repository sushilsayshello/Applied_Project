<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DDoS Detection System Prototype</title>
    <!-- Include CSS styles -->
    <style>
        /* General Styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f4f7;
            margin: 0;
            padding: 0;
        }
        h1, h2 {
            color: #34495e;
            text-align: center;
        }
        #container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 20px;
        }
        /* Header */
        header {
            background-color: #2c3e50;
            padding: 20px 0;
            color: white;
            margin-bottom: 40px;
        }
        header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        /* File Upload Section */
        #upload-section {
            text-align: center;
            margin-bottom: 40px;
        }
        #file-input {
            display: none;
        }
        #custom-button {
            display: inline-block;
            padding: 15px 30px;
            background-color: #3498db;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s;
        }
        #custom-button:hover {
            background-color: #2980b9;
        }
        #file-name {
            margin-top: 15px;
            font-style: italic;
            color: #7f8c8d;
        }
        /* Loader */
        #loader {
            display: none;
            text-align: center;
            margin-bottom: 40px;
        }
        #loader img {
            width: 100px;
        }
        /* Output Section */
        #output {
            margin-top: 30px;
        }
        .section-title {
            font-size: 1.8em;
            color: #2c3e50;
            margin-bottom: 20px;
            border-left: 5px solid #3498db;
            padding-left: 10px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 30px;
            background-color: white;
        }
        th, td {
            border: 1px solid #ecf0f1;
            padding: 12px;
            font-size: 0.95em;
            text-align: center;
        }
        th {
            background-color: #ecf0f1;
        }
        /* Chart Styles */
        .chart-container {
            position: relative;
            margin: 0 auto 40px auto;
            height: 400px;
            width: 80%;
        }
    </style>
</head>
<body>
    <header>
        <div id="container">
            <h1>DDoS Detection System Prototype</h1>
        </div>
    </header>

    <div id="container">
        <!-- File Upload Section -->
        <div id="upload-section">
            <label for="file-input" id="custom-button">Choose CSV File</label>
            <input type="file" id="file-input" accept=".csv">
            <div id="file-name">No file chosen</div>
        </div>

        <!-- Loader -->
        <div id="loader">
            <img src="https://i.imgur.com/LLF5iyg.gif" alt="Loading...">
            <p>Processing data, please wait...</p>
        </div>

        <!-- Output Section -->
        <div id="output"></div>
    </div>

    <!-- Include necessary JavaScript libraries -->
    <!-- Papa Parse for CSV parsing -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- TensorFlow.js for machine learning -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"></script>
    <!-- TensorFlow.js Visualization -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis"></script>

    <script>
        // Custom File Input Button
        const realFileBtn = document.getElementById('file-input');
        const customBtn = document.getElementById('custom-button');
        const fileName = document.getElementById('file-name');

        customBtn.addEventListener('click', function() {
            realFileBtn.click();
        });

        realFileBtn.addEventListener('change', function() {
            if (realFileBtn.value) {
                fileName.innerHTML = realFileBtn.files[0].name;
                handleFileSelect();
            } else {
                fileName.innerHTML = 'No file chosen';
            }
        });

        // Handle File Selection
        async function handleFileSelect() {
            const file = realFileBtn.files[0];
            if (file) {
                document.getElementById('loader').style.display = 'block';
                Papa.parse(file, {
                    header: true,
                    dynamicTyping: true,
                    skipEmptyLines: true,
                    complete: function(results) {
                        const data = results.data;
                        processData(data);
                    }
                });
            }
        }

        // Process Data
        function processData(data) {
            // Extract column names
            const columns = Object.keys(data[0]);

            // Remove columns with zero variance
            const filteredColumns = removeZeroVarianceColumns(data, columns);

            // Create new features (packet_rate, byte_rate)
            createNewFeatures(data);

            // Apply log transformation to 'bytecount'
            applyLogTransformation(data);

            // Identify numeric columns
            const numericColumns = identifyNumericColumns(data);

            // Scale numeric features
            scaleNumericFeatures(data, numericColumns);

            // Encode categorical variables
            const encodedData = encodeCategoricalVariables(data);

            // Impute missing values
            imputeMissingValues(encodedData, numericColumns);

            // Prepare data for model training
            const { features, labels, featureColumns } = prepareDataForModel(encodedData, numericColumns);

            // Split data into training and testing sets
            const { trainFeatures, trainLabels, testFeatures, testLabels } = splitData(features, labels);

            // Build and train the model
            buildAndTrainModel(trainFeatures, trainLabels, testFeatures, testLabels, featureColumns);
        }

        // Remove columns with zero variance
        function removeZeroVarianceColumns(data, columns) {
            const filteredColumns = columns.filter(col => {
                const uniqueValues = [...new Set(data.map(item => item[col]))];
                return uniqueValues.length > 1;
            });
            return filteredColumns;
        }

        // Create new features
        function createNewFeatures(data) {
            data.forEach(item => {
                if (item['pktperflow'] != null && item['dur'] != null && item['dur'] !== 0) {
                    item['packet_rate'] = item['pktperflow'] / item['dur'];
                } else {
                    item['packet_rate'] = 0;
                }
                if (item['byteperflow'] != null && item['dur'] != null && item['dur'] !== 0) {
                    item['byte_rate'] = item['byteperflow'] / item['dur'];
                } else {
                    item['byte_rate'] = 0;
                }
            });
        }

        // Apply log transformation
        function applyLogTransformation(data) {
            data.forEach(item => {
                if (item['bytecount'] != null) {
                    item['log_bytecount'] = Math.log1p(item['bytecount']);
                } else {
                    item['log_bytecount'] = 0;
                }
            });
        }

        // Identify numeric columns
        function identifyNumericColumns(data) {
            return Object.keys(data[0]).filter(col => {
                return typeof data[0][col] === 'number' && col !== 'label';
            });
        }

        // Scale numeric features
        function scaleNumericFeatures(data, numericColumns) {
            numericColumns.forEach(col => {
                const values = data.map(item => item[col]);
                const mean = values.reduce((a, b) => a + b, 0) / values.length;
                const stdDev = Math.sqrt(values.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / values.length);

                data.forEach(item => {
                    if (stdDev !== 0) {
                        item[col] = (item[col] - mean) / stdDev;
                    } else {
                        item[col] = 0;
                    }
                });
            });
        }

        // Encode categorical variables
        function encodeCategoricalVariables(data) {
            // Identify categorical columns
            const categoricalCols = Object.keys(data[0]).filter(col => {
                return typeof data[0][col] === 'string' && col !== 'label';
            });

            // One-hot encode categorical variables
            categoricalCols.forEach(col => {
                const uniqueValues = [...new Set(data.map(item => item[col]))];
                uniqueValues.forEach(val => {
                    data.forEach(item => {
                        item[`${col}_${val}`] = item[col] === val ? 1 : 0;
                    });
                });
                // Remove original categorical column
                data.forEach(item => {
                    delete item[col];
                });
            });

            return data;
        }

        // Impute missing values
        function imputeMissingValues(data, numericColumns) {
            numericColumns.forEach(col => {
                const values = data.map(item => item[col]).filter(val => val != null);
                const mean = values.reduce((a, b) => a + b, 0) / values.length;

                data.forEach(item => {
                    if (item[col] == null || isNaN(item[col])) {
                        item[col] = mean;
                    }
                });
            });
        }

        // Prepare data for model
        function prepareDataForModel(data, numericColumns) {
            // Ensure 'label' column exists
            if (!data[0].hasOwnProperty('label')) {
                alert('Error: The dataset must contain a "label" column for classification.');
                return;
            }

            // Extract features and labels
            const labels = data.map(item => item['label']);
            const featureColumns = Object.keys(data[0]).filter(col => col !== 'label');
            const features = data.map(item => featureColumns.map(col => item[col]));

            return { features, labels, featureColumns };
        }

        // Split data into training and testing sets
        function splitData(features, labels) {
            // Shuffle data
            const indices = [...Array(features.length).keys()];
            tf.util.shuffle(indices);

            const shuffledFeatures = indices.map(i => features[i]);
            const shuffledLabels = indices.map(i => labels[i]);

            // Split data (80% training, 20% testing)
            const trainSize = Math.floor(features.length * 0.8);
            const trainFeatures = shuffledFeatures.slice(0, trainSize);
            const trainLabels = shuffledLabels.slice(0, trainSize);
            const testFeatures = shuffledFeatures.slice(trainSize);
            const testLabels = shuffledLabels.slice(trainSize);

            return { trainFeatures, trainLabels, testFeatures, testLabels };
        }

        // Build and train the model
        async function buildAndTrainModel(trainFeatures, trainLabels, testFeatures, testLabels, featureColumns) {
            const outputDiv = document.getElementById('output');
            document.getElementById('loader').style.display = 'none';

            // Convert data to tensors
            const trainFeatureTensor = tf.tensor2d(trainFeatures);
            const trainLabelTensor = tf.tensor1d(trainLabels, 'int32');
            const testFeatureTensor = tf.tensor2d(testFeatures);
            const testLabelTensor = tf.tensor1d(testLabels, 'int32');

            // Build a simple neural network model
            const model = tf.sequential();
            model.add(tf.layers.dense({ inputShape: [trainFeatures[0].length], units: 16, activation: 'relu' }));
            model.add(tf.layers.dense({ units: 8, activation: 'relu' }));
            model.add(tf.layers.dense({ units: 2, activation: 'softmax' }));

            model.compile({
                optimizer: tf.train.adam(),
                loss: 'sparseCategoricalCrossentropy',
                metrics: ['accuracy'],
            });

            // Visualize Model Summary
            const modelSummaryDiv = document.createElement('div');
            tfvis.show.modelSummary(modelSummaryDiv, model);
            outputDiv.appendChild(modelSummaryDiv);

            // Train the model
            await model.fit(trainFeatureTensor, trainLabelTensor, {
                epochs: 20,
                batchSize: 32,
                validationSplit: 0.1,
                callbacks: tfvis.show.fitCallbacks(
                    { name: 'Training Performance' },
                    ['loss', 'acc'],
                    { height: 200, callbacks: ['onEpochEnd'] }
                )
            });

            // Evaluate the model
            const evalResult = model.evaluate(testFeatureTensor, testLabelTensor);
            const testLoss = evalResult[0].dataSync()[0];
            const testAcc = evalResult[1].dataSync()[0];

            // Display Evaluation Results
            const evalDiv = document.createElement('div');
            evalDiv.innerHTML = `
                <h2 class="section-title">Model Evaluation</h2>
                <p><strong>Test Loss:</strong> ${testLoss.toFixed(4)}</p>
                <p><strong>Test Accuracy:</strong> ${(testAcc * 100).toFixed(2)}%</p>
            `;
            outputDiv.appendChild(evalDiv);

            // Make predictions on test data
            const predictions = model.predict(testFeatureTensor).argMax(-1).dataSync();
            const actualLabels = testLabelTensor.dataSync();

            // Display confusion matrix
            displayConfusionMatrix(predictions, actualLabels);

            // Feature Importance (Permutation Importance)
            const featureImportances = await computePermutationImportance(model, testFeatureTensor, testLabelTensor, featureColumns);
            displayFeatureImportance(featureImportances);

            // Clean up tensors
            tf.dispose([trainFeatureTensor, trainLabelTensor, testFeatureTensor, testLabelTensor]);
        }

        // Display Confusion Matrix
        function displayConfusionMatrix(predictions, actualLabels) {
            const outputDiv = document.getElementById('output');

            // Compute confusion matrix
            const numClasses = 2;
            const confusionMatrix = tf.math.confusionMatrix(actualLabels, predictions, numClasses).arraySync();

            let html = `
                <h2 class="section-title">Confusion Matrix</h2>
                <table>
                    <tr>
                        <th></th>
                        <th>Predicted Negative</th>
                        <th>Predicted Positive</th>
                    </tr>
                    <tr>
                        <th>Actual Negative</th>
                        <td>${confusionMatrix[0][0]}</td>
                        <td>${confusionMatrix[0][1]}</td>
                    </tr>
                    <tr>
                        <th>Actual Positive</th>
                        <td>${confusionMatrix[1][0]}</td>
                        <td>${confusionMatrix[1][1]}</td>
                    </tr>
                </table>
            `;

            const confusionDiv = document.createElement('div');
            confusionDiv.innerHTML = html;
            outputDiv.appendChild(confusionDiv);
        }

        // Compute Permutation Importance
        async function computePermutationImportance(model, testFeatures, testLabels, featureColumns) {
            const baseAccuracyTensor = model.evaluate(testFeatures, testLabels)[1];
            const baseAccuracy = baseAccuracyTensor.dataSync()[0];
            const importances = [];

            for (let i = 0; i < featureColumns.length; i++) {
                // Permute the feature column
                const permutedFeatures = testFeatures.clone();
                const originalColumn = permutedFeatures.slice([0, i], [-1, 1]).clone();
                const shuffledColumn = tf.util.shuffle(originalColumn.arraySync());
                permutedFeatures.slice([0, i], [-1, 1]).assign(tf.tensor2d(shuffledColumn, [shuffledColumn.length, 1]));

                // Evaluate the model with permuted features
                const permutedAccuracyTensor = model.evaluate(permutedFeatures, testLabels)[1];
                const permutedAccuracy = permutedAccuracyTensor.dataSync()[0];

                // Compute importance
                const importance = baseAccuracy - permutedAccuracy;
                importances.push({ feature: featureColumns[i], importance });

                // Clean up tensors
                permutedFeatures.dispose();
                originalColumn.dispose();
                permutedAccuracyTensor.dispose();
            }

            baseAccuracyTensor.dispose();
            return importances.sort((a, b) => b.importance - a.importance);
        }

        // Display Feature Importance
        function displayFeatureImportance(featureImportances) {
            const outputDiv = document.getElementById('output');
            const importanceDiv = document.createElement('div');
            importanceDiv.innerHTML = `<h2 class="section-title">Feature Importance</h2>`;
            outputDiv.appendChild(importanceDiv);

            const canvas = document.createElement('canvas');
            canvas.id = 'importanceChart';
            canvas.style.backgroundColor = 'white';
            importanceDiv.appendChild(canvas);

            new Chart(canvas.getContext('2d'), {
                type: 'bar',
                data: {
                    labels: featureImportances.map(item => item.feature),
                    datasets: [{
                        label: 'Importance',
                        data: featureImportances.map(item => item.importance),
                        backgroundColor: 'rgba(52, 152, 219, 0.7)',
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Feature Importance (Permutation Importance)',
                        fontSize: 18,
                        fontColor: '#2c3e50',
                    },
                    legend: {
                        display: false
                    },
                    scales: {
                        xAxes: [{
                            ticks: {
                                autoSkip: false,
                                maxRotation: 90,
                                minRotation: 90,
                                fontColor: '#2c3e50',
                                fontSize: 12,
                            },
                            gridLines: {
                                display: false,
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                fontColor: '#2c3e50',
                                fontSize: 12,
                            },
                            gridLines: {
                                color: '#ecf0f1',
                            }
                        }]
                    }
                }
            });
        }
    </script>
</body>
</html>
